@page "/"

<PageTitle>Index</PageTitle>



<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
   @*  <MudStack Row Class="mb-2">
        @foreach (var item in new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 })
        {
            <MudButton OnClick="(()=> ChangeMonth(item))" Variant="Variant.Filled" Color="Color.Success">@MD.PersianDateTime.Standard.PersianDateTime.GetPersianMonthName(item)</MudButton>
        }
    </MudStack> *@
    <MudGrid Spacing="1">
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">شنبه</MudText></MudItem>
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">یکشنبه</MudText></MudItem>
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">دوشنبه</MudText></MudItem>
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">سه‌شنبه</MudText></MudItem>
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">چهار‌شنبه</MudText></MudItem>
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">پنجشنبه</MudText></MudItem>
        <MudItem Style="@("width:"+ (100/7) + "%")"><MudText Align="Align.Center">جمعه</MudText></MudItem>
        <MudItem xs="12">
            <MudDropContainer T="EventItem" Items="_Events" ItemsSelector="@((item,dropzone) => item.Day == int.Parse(dropzone))" ItemDropped="ItemUpdated">
                <ChildContent>
                    <MudGrid Spacing="0">
                        @foreach (var day in _Days)
                        {
                            <MudItem Style="@("width:"+ (100/7) + "%;")">
                                @if (day != default)
                                {
                                    <MudPaper Outlined Elevation="0" Square>
                                        <MudDropZone T="EventItem" Identifier="@day.ToString()" Style="height:100px;max-height:100px" Class="pa-1 overflow-x-auto">
                                            <MudText Typo="Typo.caption">@day </MudText>

                                        </MudDropZone>
                                    </MudPaper>
                                }
                                else
                                {

                                }
                            </MudItem>
                        }
                    </MudGrid>
                </ChildContent>
                <ItemRenderer>
                    <MudChip T="object" Label="true" Size="Size.Small" Color="Color.Info" OnClick="(()=>OpenEvent(context))">
                        <MudText Typo="Typo.caption">@context.Event</MudText>
                    </MudChip>
                </ItemRenderer>
            </MudDropContainer>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Inject] public ISnackbar Snackbar { get; set; }

    int[] _Days = new int[35];

    private void ItemUpdated(MudItemDropInfo<EventItem> dropItem)
    {
        dropItem.Item.Day = int.Parse(dropItem.DropzoneIdentifier);
    }

    class EventItem
    {
        public int Day { get; set; }
        public string Event { get; set; }
    }

    List<EventItem> _Events = new List<EventItem>
    {
       new EventItem { Day = 7 , Event = "Event 1"},
       new EventItem { Day = 23 , Event = "Event 1"},
       new EventItem { Day = 24 , Event = "Event 2"},
       new EventItem { Day = 11 , Event = "Event 3"},
       new EventItem { Day = 11 , Event = "Event 4"},
    };

    async Task OpenEvent(EventItem @event)
    {
        Snackbar.Add(@event.Event);
    }

    protected override void OnInitialized()
    {
        ChangeMonth(MD.PersianDateTime.Standard.PersianDateTime.Today.Month);
    }

    public void ChangeMonth(int month)
    {
        _Days = new int[35];
        int startJump = (int)new MD.PersianDateTime.Standard.PersianDateTime(1403, month, 01).DayOfWeek;
        @for (int i = 1; i <= new
MD.PersianDateTime.Standard.PersianDateTime(1403, month, 01).GetMonthDays; i++)
        {
            int index = startJump + i;
            if (index >= _Days.Length)
            {
                index = index - _Days.Length;
            }
            _Days[index] = i;
        }
    }

}